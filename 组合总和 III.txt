
class Solution {
    int count;
    int sum;
    List<List<Integer>> ret=new ArrayList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums=new int[]{1,2,3,4,5,6,7,8,9};
        ArrayList<Integer> arrayList=new ArrayList<>();
        count=k;
        sum=n;
        dfs(0,nums,arrayList);
        return ret;
    }

    private void dfs(int start, int[] nums, ArrayList<Integer> arrayList) {
               if(arrayList.size()==count){
                   check(arrayList);
                   return;
               }
        for (int i = start; i < nums.length; i++) {
            arrayList.add(nums[i]);
            dfs(i+1,nums,arrayList);
            arrayList.remove(arrayList.size()-1);
        }
    }
    private void check(ArrayList<Integer> arrayList){
        int temp=0;
        for (Integer integer : arrayList) {
            temp=temp+integer;
        }
        if(temp==sum){
            ret.add(new ArrayList<>(arrayList));
        }
    }
}