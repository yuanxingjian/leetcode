import java.util.Arrays;

class Solution {
    //3,2
    public int change(int amount, int[] coins) {
        //动态规划：求最值或者种数而不需要求具体的情况下，可以考虑动态规划求解
        //类似于完全背包问题(同一个物品可以被重复选取)
        //可以不用排序
        //  Arrays.sort(coins);
        int m=coins.length;
        int n=amount;
        int[][] dp=new int[m][n+1];//第一列赋值为1
        for (int i = 0; i <m; i++) {
            dp[i][0]=1;
        }
        for (int i = 1; i <= n; i++) {
            int coin=coins[0];
            if(i%coin==0){
                    dp[0][i]=1;//赋初值
            }
        }

        for (int i = 1; i <m ; i++) {
            int coin=coins[i];
            for (int j = 1; j <=n ; j++) {
                if(j>=coin){
                    dp[i][j]=dp[i-1][j]+dp[i][j-coin];
                }else {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[m-1][n];
    }
}