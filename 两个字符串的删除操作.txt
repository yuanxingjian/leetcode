class Solution {
    public int minDistance(String word1, String word2) {
       int length=  longestCommonSubsequence(word1,word2);
        return word1.length()+word2.length()-length*2;
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int m=text2.length();
        int n=text1.length();
           int[][] dp=new int[m][n];
           char temp=text2.charAt(0);
        for (int i = 0; i <n ; i++) {
            if(temp==text1.charAt(i)){
                dp[0][i]=1;
                for (int j = i+1; j < n; j++) {
                    dp[0][j]=1;
                }
                break;
            }
        }
        for (int i = 1; i < m; i++) {
            temp=text2.charAt(i);
            for (int j = 0; j < n; j++) {
                if(temp!=text1.charAt(j)){
                    if(j==0){
                        dp[i][j]=dp[i-1][j];
                    }else {
                        dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                    }
                }else {
                    if(j==0){
                        dp[i][j]=1;
                    }else {
                        dp[i][j]=dp[i-1][j-1]+1;
                    }
                }
            }
        }
        return dp[m-1][n-1];
    }
}